import { NextRequest, NextResponse } from 'next/server';
import { requireRole } from '@/lib/auth';
import prisma from '@/lib/prisma';

// GET: List exams (optionally by lessonId)
export async function GET(request: NextRequest) {
  const token = await requireRole(request, ['TEACHER']);
  if (token instanceof NextResponse) return token;
  const { searchParams } = new URL(request.url);
  const lessonId = searchParams.get('lessonId');
  const where = lessonId ? { lessonId } : {};
  const exams = await prisma.exam.findMany({ where });
  return NextResponse.json(exams);
}

// POST: Create exam (teacher only)
export async function POST(request: NextRequest) {
  const token = await requireRole(request, ['TEACHER']);
  if (token instanceof NextResponse) return token;
  const { lessonId, timed, duration } = await request.json();
  if (!lessonId) {
    return NextResponse.json({ error: 'lessonId is required.' }, { status: 400 });
  }
  const exam = await prisma.exam.create({
    data: {
      lessonId,
      timed: !!timed,
      duration: timed ? duration : null,
    },
  });
  return NextResponse.json(exam, { status: 201 });
}

// PATCH: Update exam (teacher only)
export async function PATCH(request: NextRequest) {
  const token = await requireRole(request, ['TEACHER']);
  if (token instanceof NextResponse) return token;
  const { id, timed, duration } = await request.json();
  if (!id) {
    return NextResponse.json({ error: 'Exam id is required.' }, { status: 400 });
  }
  const exam = await prisma.exam.update({
    where: { id },
    data: { timed: !!timed, duration: timed ? duration : null },
  });
  return NextResponse.json(exam);
}

// DELETE: Delete exam (teacher only)
export async function DELETE(request: NextRequest) {
  const token = await requireRole(request, ['TEACHER']);
  if (token instanceof NextResponse) return token;
  const { id } = await request.json();
  if (!id) {
    return NextResponse.json({ error: 'Exam id is required.' }, { status: 400 });
  }
  await prisma.exam.delete({ where: { id } });
  return NextResponse.json({ message: 'Exam deleted.' });
}
