import { NextRequest, NextResponse } from 'next/server';
import { requireRole } from '@/lib/auth';
import prisma from '@/lib/prisma';

function generatePin(length = 6) {
  return Array.from({ length }, () => Math.floor(Math.random() * 10)).join('');
}

// POST: Generate new PIN(s) (flexible: lessonId and studentId optional, bulk only if no studentId)
export async function POST(request: NextRequest) {
  const token = await requireRole(request, ['TEACHER']);
  if (token instanceof NextResponse) return token;
  const { lessonId, count = 1, assignToStudentId, expiresAt } = await request.json();
  // If studentId is provided, only allow count=1
  if (assignToStudentId && count !== 1) {
    return NextResponse.json({ error: 'When assigning to a student, only one PIN can be created at a time.' }, { status: 400 });
  }
  // Bulk creation only allowed if no studentId
  if (!assignToStudentId && count < 1) {
    return NextResponse.json({ error: 'Count must be at least 1.' }, { status: 400 });
  }
  const pins = [];
  for (let i = 0; i < count; i++) {
    let pin;
    let exists = true;
    while (exists) {
      pin = generatePin();
      exists = await prisma.pinCode.findUnique({ where: { code: pin } });
    }
    pins.push(pin);
  }
  const createdPins = await prisma.$transaction(
    pins.map((code) =>
      prisma.pinCode.create({
        data: {
          code,
          lessonId: lessonId || null,
          studentId: assignToStudentId || null,
          createdById: token.id,
          expiresAt: expiresAt ? new Date(expiresAt) : null,
        },
      })
    )
  );
  return NextResponse.json(createdPins, { status: 201 });
}

// GET: List/manage PINs for a lesson (teacher only)
export async function GET(request: NextRequest) {
  const token = await requireRole(request, ['TEACHER']);
  if (token instanceof NextResponse) return token;
  const { searchParams } = new URL(request.url);
  const lessonId = searchParams.get('lessonId');
  if (!lessonId) {
    return NextResponse.json({ error: 'lessonId is required.' }, { status: 400 });
  }
  const pins = await prisma.pinCode.findMany({
    where: { lessonId },
    orderBy: { createdAt: 'desc' },
  });
  return NextResponse.json(pins);
}

// PATCH: Mark PIN(s) as printed or revoked (teacher only)
export async function PATCH(request: NextRequest) {
  const token = await requireRole(request, ['TEACHER']);
  if (token instanceof NextResponse) return token;
  const { pinIds, action } = await request.json();
  if (!Array.isArray(pinIds) || pinIds.length === 0) {
    return NextResponse.json({ error: 'pinIds array is required.' }, { status: 400 });
  }
  if (action === 'revoke') {
    const result = await prisma.pinCode.updateMany({
      where: { id: { in: pinIds }, used: false },
      data: { locked: true },
    });
    return NextResponse.json({ revoked: result.count });
  } else {
    const result = await prisma.pinCode.updateMany({
      where: { id: { in: pinIds } },
      data: { printed: true },
    });
    return NextResponse.json({ updated: result.count });
  }
}
