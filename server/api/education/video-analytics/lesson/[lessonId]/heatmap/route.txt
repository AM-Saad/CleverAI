import { NextRequest, NextResponse } from 'next/server';
import prisma from '@/lib/prisma';

const BUCKET_SIZE = 10; // seconds

type VideoEvent = { position: number };

export async function GET(req: NextRequest, { params }: { params: { lessonId: string } }) {
  const lessonId = params.lessonId;
  if (!lessonId) {
    return NextResponse.json({ error: 'Missing lessonId' }, { status: 400 });
  }

  // Fetch all play, seek, and pause events for this lesson
  const events: VideoEvent[] = await prisma.videoWatchEvent.findMany({
    where: {
      lessonId,
      event: { in: ['play', 'seek', 'pause'] },
    },
    select: { position: true },
  });

  // Find max position to determine number of buckets
  const maxPosition = events.reduce((max: number, e: VideoEvent) => Math.max(max, e.position), 0);
  const numBuckets = Math.ceil((maxPosition + 1) / BUCKET_SIZE);
  const buckets = Array.from({ length: numBuckets }, (_, i) => ({
    start: i * BUCKET_SIZE,
    end: (i + 1) * BUCKET_SIZE,
    views: 0,
  }));

  // Count events per bucket
  for (const e of events) {
    const bucketIdx = Math.floor(e.position / BUCKET_SIZE);
    if (buckets[bucketIdx]) {
      buckets[bucketIdx].views++;
    }
  }

  return NextResponse.json({ buckets });
}
