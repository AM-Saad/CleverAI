import { NextRequest, NextResponse } from 'next/server';
import prisma from '@/lib/prisma';

type DurationEvent = { studentId: string; duration: number | null };

export async function GET(req: NextRequest, { params }: { params: { lessonId: string } }) {
  const lessonId = params.lessonId;
  if (!lessonId) {
    return NextResponse.json({ error: 'Missing lessonId' }, { status: 400 });
  }

  // Get all events with a duration for this lesson
  const events: DurationEvent[] = await prisma.videoWatchEvent.findMany({
    where: { lessonId, duration: { not: null } },
    select: { studentId: true, duration: true },
  });

  // Sum total duration
  const totalDuration = events.reduce((sum: number, e: DurationEvent) => sum + (e.duration ?? 0), 0);

  // Get number of unique students who started the video
  const students = new Set(events.map((e: DurationEvent) => e.studentId));
  const numStudents = students.size;

  const averageDuration = numStudents === 0 ? 0 : totalDuration / numStudents;

  return NextResponse.json({ averageDuration });
}
