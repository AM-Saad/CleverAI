import { NextRequest, NextResponse } from 'next/server';
import prisma from '@/lib/prisma';
import { startOfDay } from 'date-fns';

type ViewEvent = { studentId: string; createdAt: Date };

export async function GET(req: NextRequest, { params }: { params: { lessonId: string } }) {
  const lessonId = params.lessonId;
  if (!lessonId) {
    return NextResponse.json({ error: 'Missing lessonId' }, { status: 400 });
  }

  // Get all events for this lesson
  const events: ViewEvent[] = await prisma.videoWatchEvent.findMany({
    where: { lessonId },
    select: { studentId: true, createdAt: true },
    orderBy: { createdAt: 'asc' },
  });

  // Map studentId to set of days (approximate sessions by day)
  const studentDays = new Map<string, Set<string>>();
  for (const e of events) {
    const day = startOfDay(e.createdAt).toISOString();
    if (!studentDays.has(e.studentId)) {
      studentDays.set(e.studentId, new Set());
    }
    studentDays.get(e.studentId)!.add(day);
  }

  let firstViews = 0;
  let repeatViews = 0;
  for (const days of studentDays.values()) {
    if (days.size === 1) firstViews++;
    else if (days.size > 1) repeatViews++;
  }

  return NextResponse.json({ firstViews, repeatViews });
}
