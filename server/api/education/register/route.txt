import { NextRequest, NextResponse } from 'next/server';
import prisma from '@/lib/prisma';
import bcrypt from 'bcryptjs';

export async function POST(request: NextRequest) {
  const { name, phone, parentPhone, gender, grade, password } = await request.json();
  if (!name || !phone || !parentPhone || !gender || !grade || !password) {
    return NextResponse.json({ error: 'All fields are required.' }, { status: 400 });
  }
  // Check if phone already exists
  const existing = await prisma.user.findUnique({ where: { phone } });
  if (existing) {
    return NextResponse.json({ error: 'Phone number already registered.' }, { status: 409 });
  }
  // Hash password
  const hashedPassword = await bcrypt.hash(password, 10);
  // Create student user
  const user = await prisma.user.create({
    data: {
      name,
      phone,
      parentPhone,
      gender,
      grade,
      password: hashedPassword,
      role: 'STUDENT',
    },
  });
  return NextResponse.json({ message: 'Registration successful', userId: user.id }, { status: 201 });
}
