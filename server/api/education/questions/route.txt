import { NextRequest, NextResponse } from 'next/server';
import { requireRole } from '@/lib/auth';
import prisma from '@/lib/prisma';

// GET: List questions (optionally by examId)
export async function GET(request: NextRequest) {
  const token = await requireRole(request, ['TEACHER']);
  if (token instanceof NextResponse) return token;
  const { searchParams } = new URL(request.url);
  const examId = searchParams.get('examId');
  const where = examId ? { examId } : {};
  const questions = await prisma.question.findMany({ where });
  return NextResponse.json(questions);
}

// POST: Create question (teacher only)
export async function POST(request: NextRequest) {
  const token = await requireRole(request, ['TEACHER']);
  if (token instanceof NextResponse) return token;
  const { examId, type, text, options, correctAnswer } = await request.json();
  if (!examId || !type || !text) {
    return NextResponse.json({ error: 'examId, type, and text are required.' }, { status: 400 });
  }
  const question = await prisma.question.create({
    data: {
      examId,
      type,
      text,
      options: options || [],
      correctAnswer: correctAnswer || null,
    },
  });
  return NextResponse.json(question, { status: 201 });
}

// PATCH: Update question (teacher only)
export async function PATCH(request: NextRequest) {
  const token = await requireRole(request, ['TEACHER']);
  if (token instanceof NextResponse) return token;
  const { id, type, text, options, correctAnswer } = await request.json();
  if (!id) {
    return NextResponse.json({ error: 'Question id is required.' }, { status: 400 });
  }
  const question = await prisma.question.update({
    where: { id },
    data: { type, text, options, correctAnswer },
  });
  return NextResponse.json(question);
}

// DELETE: Delete question (teacher only)
export async function DELETE(request: NextRequest) {
  const token = await requireRole(request, ['TEACHER']);
  if (token instanceof NextResponse) return token;
  const { id } = await request.json();
  if (!id) {
    return NextResponse.json({ error: 'Question id is required.' }, { status: 400 });
  }
  await prisma.question.delete({ where: { id } });
  return NextResponse.json({ message: 'Question deleted.' });
}
